#!/bin/bash
if [[ ! ${DOMAIN:-} ]]; then
cat <<EOF
Please set the DOMAIN environment variable to run this

export DOMAIN="your.com"
./run-dex
EOF
    exit 1
fi

MYDIR=$(readlink -f ${0%/*})
echo MYDIR=${MYDIR}
cd ${MYDIR}

# run-dex
# decouple auth ids from repo by setting the vars in environment startup file

# update the file and run this chmod +x run-dex; ./run-dex

echo Overwrite the configuration in environment.ts

cat > config.yaml <<EOF
# Options for controlling the logger.
logger:
  level: "debug"
  format: "text" # can also be "json"

# Based on dex/examples/config-dev.yaml

# The base path of dex and the external name of the OpenID Connect service.
# This is the canonical URL that all clients MUST use to refer to dex. If a
# path is provided, dex's HTTP service will listen at a non-root URL.
issuer: ${ISSUER_URI}

# The storage configuration determines where dex stores its state. Supported
# options include SQL flavors and Kubernetes third party resources.
#
# See the storage document at Documentation/storage.md for further information.
storage:
  type: sqlite3
  config:
    file: dex.db

frontend:
  theme: active
  dir: web

web:
  allowedOrigins: ['*']
  https: ${DOMAIN}:5556
  tlsCert:     /etc/certs/${DOMAIN}/${DOMAIN}.crt
  tlsKey:      /etc/certs/${DOMAIN}/${DOMAIN}.key
  tlsClientCA: /etc/certs/${DOMAIN}/ca.crt

grpc:
 addr: ${DOMAIN}:5557
 tlsCert:     /etc/certs/${DOMAIN}/${DOMAIN}.crt
 tlsKey:      /etc/certs/${DOMAIN}/${DOMAIN}.key
 tlsClientCA: /etc/certs/${DOMAIN}/ca.crt

# Uncomment this block to enable configuration
# for the expiration time durations.

expiry:
  signingKeys: "6h"
  idTokens: "24h"

# Uncomment this block to control which response
# types dex supports. For example the following
# response types enable the implicit flow for 
# web-only clients.

# Defaults to ["code"], the code flow.
oauth2:
  responseTypes: ['id_token', 'token', 'code']

connectors:
- type: mockCallback
  id: mock
  name: Dex Example
- type: oidc
  id: google
  name: Google
  config:
    issuer: https://accounts.google.com
    clientID: \$GOOGLE_CLIENT_ID
    clientSecret: \$GOOGLE_CLIENT_SECRET
    redirectURI: ${ISSUER_URI}/callback
    # hostedDomains:
    # - \$GOOGLE_HOSTED_DOMAIN
- type: github
  # Required field for connector id.
  id: github
  # Required field for connector name.
  name: GitHub
  config:
    # Credentials can be string literals or pulled from the environment.
    clientID: \$GITHUB_CLIENT_ID
    clientSecret: \$GITHUB_CLIENT_SECRET
    redirectURI: ${ISSUER_URI}/callback
    # redirectURI: http://127.0.0.1:5556/dex/callback
    # Optional organizations and teams, communicated through the "groups" scope.
    #
    # NOTE: This is an EXPERIMENTAL config option and will likely change.
    #
    # Legacy 'org' field. 'org' and 'orgs' cannot be used simultaneously. A user
    # MUST be a member of the following org to authenticate with dex.
    # org: my-organization
    #
    # Dex queries the following organizations for group information if the
    # "groups" scope is provided. Group claims are formatted as "(org):(team)".
    # For example if a user is part of the "engineering" team of the "coreos"
    # org, the group claim would include "coreos:engineering".
    #
    # A user MUST be a member of at least one of the following orgs to
    # authenticate with dex.
    orgs:
    - name: ${GITHUB_ORG_NAME}
      # Include all teams as claims.
    # - name: my-organization-with-teams
    #   # A white list of teams. Only include group claims for these teams.
    #   teams:
    #   - red-team
    #   - blue-team

# Instead of reading from an external storage, use this list of clients.
#
# If this option isn't chosen clients may be added through the gRPC API.
staticClients:
- id: "${DEX_CLIENT_ID}"
  redirectURIs: 
  - '${ISSUER_URI}/callback'
  - 'https://${DOMAIN}:5555/callback'
  - 'https://${DOMAIN}:4200/home'
  - 'https://${DOMAIN}:8888/home'
  - 'https://${DOMAIN}:4200'
  - 'https://${DOMAIN}:8888'
  name: 'Angular ${DEX_CLIENT_ID}'
  secret: "${StaticFlowSecret}"

# Let dex keep a list of passwords which can be used to login to dex.
enablePasswordDB: true

# A static list of passwords to login the end user. By identifying here, dex
# won't look in its underlying storage for passwords.
#
# If this option isn't chosen users may be added through the gRPC API.

staticPasswords:
- email: "${ADMIN_UID_1}"
  hash: "${AdminPasswordHash}"
  username: "${ADMIN_UID_1}"
  userID: "e966e278-d584-4def-bce5-3402c1b3929c"
- email: "${ADMIN_UID_2}"
  hash: "${AdminPasswordHash}"
  username: "${ADMIN_UID_2}"
  userID: "c3910054-4d10-11e8-a537-68f7284fe468"
- email: "${ADMIN_UID_3}"
  # bcrypt hash of the string "password"
  hash: "${AdminPasswordHash}"
  username: "${ADMIN_UID_3}"
  userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
- email: "${ADMIN_UID_4}"
  hash: "${AdminPasswordHash}"
  username: "${ADMIN_UID_4}"
  userID: "c4867bef-2051-452b-a3d7-f533e334bff5"
- email: "${ADMIN_UID_5}"
  hash: "${AdminPasswordHash}"
  username: "${ADMIN_UID_5}"
  userID: "bb0c1ea0-4d10-11e8-b3ac-68f7284fe468"

EOF

echo dex serve config.yaml
# strace dex serve config.yaml &> dex.log &
dex serve config.yaml &
 # &> dex.log &
dex_pid=$!

echo sleep waiting for dex startup
until curl -s -k ${ISSUER_URI} &> /dev/null; do sleep 1; printf "."; done

cmd="example-app \
  --issuer ${ISSUER_URI} \
  --listen https://${DOMAIN}:5555 \
  --redirect-uri https://${DOMAIN}:8888/home \
  --debug \
  --tls-key /etc/certs/${DOMAIN}/${DOMAIN}.key \
  --tls-cert /etc/certs/${DOMAIN}/${DOMAIN}.crt \
  --issuer-root-ca /etc/certs/${DOMAIN}/ca.crt \
  --client-id ${DEX_CLIENT_ID} \
  --client-secret=${StaticFlowSecret}" \



echo "${cmd}"
${cmd} &> ex.log &
app_pid=$!

echo Saving the pids so you can 'kill $(cat pid)' to stop them 
echo during development

echo "${app_pid} ${dex_pid}" > pid
